#!/usr/bin/env python3
"""
Test Face Recognition System v·ªõi ·∫£nh m·∫´u t·ª´ InsightFace
"""

import cv2
import numpy as np
from face_recognition_system import FaceRecognitionSystem
import insightface
from insightface.data import get_image as ins_get_image

def test_with_insightface_images():
    """Test v·ªõi ·∫£nh m·∫´u t·ª´ InsightFace"""
    print("üöÄ Test Face Recognition System v·ªõi ·∫£nh m·∫´u InsightFace")
    print("="*60)
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    system = FaceRecognitionSystem()
    
    try:
        # L·∫•y ·∫£nh m·∫´u t·ª´ InsightFace
        print("üì∏ L·∫•y ·∫£nh m·∫´u t·ª´ InsightFace...")
        img = ins_get_image('t1')  # ·∫¢nh c√≥ nhi·ªÅu khu√¥n m·∫∑t
        
        # L∆∞u ·∫£nh ƒë·ªÉ test
        cv2.imwrite('insightface_test.jpg', img)
        print("‚úÖ ƒê√£ l∆∞u ·∫£nh m·∫´u: insightface_test.jpg")
        
        # Test nh·∫≠n di·ªán
        print("\nüîç Test nh·∫≠n di·ªán khu√¥n m·∫∑t...")
        result = system.recognize_face('insightface_test.jpg')
        
        if result['success']:
            print(f"‚úÖ {result['message']}")
            print(f"üë• S·ªë khu√¥n m·∫∑t t√¨m th·∫•y: {result['total_faces']}")
            
            for i, match in enumerate(result['matches']):
                print(f"\n--- Khu√¥n m·∫∑t {i+1} ---")
                print(f"üìç V·ªã tr√≠: {match['bbox']}")
                print(f"üéØ Confidence: {match['confidence']:.3f}")
                if match['match_found']:
                    print(f"üë§ Ng∆∞·ªùi: {match['person_name']}")
                    print(f"üîç Similarity: {match['match_similarity']:.4f}")
                else:
                    print(f"‚ùì Ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c (similarity: {match['best_similarity']:.4f})")
        else:
            print(f"‚ùå {result['message']}")
            
        # N·∫øu c√≥ face, h√£y ƒëƒÉng k√Ω m·ªôt face
        if result['success'] and result['total_faces'] > 0:
            print(f"\nüìù ƒêƒÉng k√Ω khu√¥n m·∫∑t ƒë·∫ßu ti√™n v·ªõi t√™n 'Person from InsightFace'...")
            
            # Crop face ƒë·∫ßu ti√™n ƒë·ªÉ ƒëƒÉng k√Ω
            face_bbox = result['matches'][0]['bbox']
            x1, y1, x2, y2 = face_bbox
            
            # Crop v√† l∆∞u face
            face_crop = img[y1:y2, x1:x2]
            cv2.imwrite('face_crop.jpg', face_crop)
            
            # ƒêƒÉng k√Ω
            register_result = system.register_face('face_crop.jpg', 'Person from InsightFace')
            if register_result['success']:
                print(f"‚úÖ {register_result['message']}")
                print(f"üÜî Face ID: {register_result['face_id']}")
                
                # Test nh·∫≠n di·ªán l·∫°i
                print(f"\nüîÑ Test nh·∫≠n di·ªán l·∫°i sau khi ƒëƒÉng k√Ω...")
                result2 = system.recognize_face('insightface_test.jpg')
                
                if result2['success']:
                    for i, match in enumerate(result2['matches']):
                        if match['match_found']:
                            print(f"üéâ Khu√¥n m·∫∑t {i+1}: Nh·∫≠n di·ªán th√†nh c√¥ng!")
                            print(f"üë§ T√™n: {match['person_name']}")
                            print(f"üéØ Similarity: {match['match_similarity']:.4f}")
                        else:
                            print(f"‚ùì Khu√¥n m·∫∑t {i+1}: Ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c")
            else:
                print(f"‚ùå L·ªói ƒëƒÉng k√Ω: {register_result['message']}")
    
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        system.close()

def test_cosine_similarity():
    """Test t√≠nh to√°n cosine similarity"""
    print("\nüßÆ Test Cosine Similarity")
    print("-" * 30)
    
    from face_processor import FaceProcessor
    
    # T·∫°o 2 vector test
    vec1 = np.random.rand(512).astype(np.float32)
    vec2 = vec1 + np.random.rand(512).astype(np.float32) * 0.1  # Vector t∆∞∆°ng t·ª±
    vec3 = np.random.rand(512).astype(np.float32)  # Vector kh√°c ho√†n to√†n
    
    sim1 = FaceProcessor.calculate_cosine_similarity(vec1, vec2)
    sim2 = FaceProcessor.calculate_cosine_similarity(vec1, vec3)
    
    print(f"üîç Similarity gi·ªØa vector t∆∞∆°ng t·ª±: {sim1:.4f}")
    print(f"üîç Similarity gi·ªØa vector kh√°c nhau: {sim2:.4f}")
    
    if sim1 > 0.6:
        print("‚úÖ Vector t∆∞∆°ng t·ª± ƒë∆∞·ª£c nh·∫≠n di·ªán ƒë√∫ng (similarity > 0.6)")
    else:
        print("‚ö†Ô∏è Vector t∆∞∆°ng t·ª± c√≥ similarity th·∫•p")
        
    if sim2 < 0.6:
        print("‚úÖ Vector kh√°c nhau ƒë∆∞·ª£c ph√¢n bi·ªát ƒë√∫ng (similarity < 0.6)")
    else:
        print("‚ö†Ô∏è Vector kh√°c nhau c√≥ similarity cao")

if __name__ == "__main__":
    # Test cosine similarity tr∆∞·ªõc
    test_cosine_similarity()
    
    # Test v·ªõi ·∫£nh m·∫´u InsightFace
    test_with_insightface_images()
    
    print("\n" + "="*60)
    print("üéâ Test ho√†n th√†nh!")
    print("üìù H·ªá th·ªëng ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng v·ªõi ·∫£nh th·∫≠t!")
    print("="*60)